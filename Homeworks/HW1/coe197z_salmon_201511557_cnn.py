# -*- coding: utf-8 -*-
"""CoE197Z_Salmon_201511557_CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/0B9asFL7gvrVfQWs4ODdpUkdVeEdCcGhIa3NtMnEyLWZfVWlJ
"""

# Library Imports
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import numpy as np

from keras.models import Sequential
from keras.layers import Activation, Dense, Dropout
from keras.layers import Conv2D, MaxPooling2D, Flatten
from keras.utils import to_categorical, plot_model, np_utils
from keras.datasets import cifar10

# Network parameters
batch_size = 32
num_classes = 10
epochs = 100
data_augmentation = True

# Load cifar10 dataset
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

# Flatten data
x_train = x_train.astype('float32')/255
x_test = x_test.astype('float32')/255

# Convert to one-hot vector
y_train = np_utils.to_categorical(y_train)
y_test = np_utils.to_categorical(y_test)
num_classes = y_test.shape[1]

# Deep Learning model: 3-layer CNN network 
model = Sequential()
# CNN 1
model.add(Conv2D(128, (3, 3), activation='relu', input_shape=(32, 32, 3)))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))
# CNN 2
model.add(Conv2D(256, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.3))
# CNN 3
model.add(Conv2D(512, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.35))    
model.add(Flatten())
# Dropout added as regularizer
model.add(Dropout(0.2))
# Dense output
model.add(Dense(num_classes, activation = 'softmax'))

# Model Compile
model.compile(loss = 'categorical_crossentropy', optimizer ='sgd', metrics = ['accuracy'])

# Model Summary
model.summary()

# Fit Model
model.fit(x_train, y_train, epochs = 100, batch_size = 32)

# Plot output       
plot_model(model, to_file = 'cnn-cifar10.png', show_shapes = True)

# Print accuracy
loss, acc = model.evaluate(x_test, y_test, batch_size = 32)
print("Test accuracy: %.2f%%" % (100 * acc))